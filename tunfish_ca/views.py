import cryptography
from cryptography.hazmat.primitives.serialization import Encoding
from django.http.response import HttpResponse, HttpResponseBadRequest
from django.views.generic.base import View
from django_ca.models import Certificate, CertificateAuthority
from rest_framework import permissions
from rest_framework.views import APIView


class GenericCAIssuersViewPEM(View):
    """
    Respond with CA certificate in PEM format.
    """

    def get(self, request, serial=None, ca_name=None):
        if serial:
            ca = CertificateAuthority.objects.get(serial=serial)
        elif ca_name:
            ca = CertificateAuthority.objects.get(name=ca_name)
        data = ca.x509.public_bytes(encoding=Encoding.PEM)
        return HttpResponse(data, content_type='application/x-pem-file')


class PKIAutoSign(APIView):
    """
    Automatically sign CSR and return client certificate in PEM format.
    """

    # TODO: Employ token-based authentication.
    permission_classes = [permissions.AllowAny]

    def post(self, request, ca_name):

        if request.content_type != "application/x-pem-file":
            return HttpResponseBadRequest("Unknown Content-Type for CSR")

        # Read certificate signing request (CSR).
        csr_payload = request.stream.read()
        csr = cryptography.x509.load_pem_x509_csr(csr_payload)

        # common_name = csr.subject.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value

        # Sign certificate with CA.
        ca = CertificateAuthority.objects.get(name=ca_name)
        cert = Certificate.objects.create_cert(ca, csr, profile="client", autogenerated=True, subject=csr.subject)

        # Respond with signed certificate in PEM format.
        data = cert.x509.public_bytes(encoding=Encoding.PEM)
        return HttpResponse(data, content_type='application/x-pem-file')
